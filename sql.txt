create table public.documents (
  id uuid not null default gen_random_uuid (),
  user_id uuid null,
  document_type character varying(50) not null,
  document_number character varying(100) not null,
  extracted_document_number character varying(100) null,
  extracted_date_of_birth date null,
  document_image_url text null,
  created_at timestamp without time zone null default now(),
  constraint documents_pkey primary key (id),
  constraint documents_user_id_fkey foreign KEY (user_id) references users (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_documents_user_id on public.documents using btree (user_id) TABLESPACE pg_default;
create table public.users (
  id uuid not null default gen_random_uuid (),
  first_name character varying(100) not null,
  last_name character varying(100) not null,
  email character varying(255) not null,
  phone_number character varying(20) not null,
  date_of_birth date not null,
  address text not null,
  created_at timestamp without time zone null default now(),
  updated_at timestamp without time zone null default now(),
  constraint users_pkey primary key (id),
  constraint users_email_key unique (email)
) TABLESPACE pg_default;
create table public.verifications (
  id uuid not null default gen_random_uuid (),
  user_id uuid null,
  document_originality_verified boolean null default false,
  document_number_match boolean null default false,
  age_verified boolean null default false,
  dob_match boolean null default false,
  selfie_image_url text null,
  live_preview_image_url text null,
  face_similarity_percentage double precision null,
  face_similarity_verified boolean null default false,
  biometric_image_url text null,
  biometric_verified boolean null default false,
  ocr_data jsonb null,
  overall_status character varying(50) null default 'pending'::character varying,
  created_at timestamp without time zone null default now(),
  updated_at timestamp without time zone null default now(),
  document_face_embedding jsonb null,
  document_face_confidence double precision null,
  document_face_detected boolean null default false,
  selfie_face_embedding jsonb null,
  selfie_face_confidence double precision null,
  liveness_passed boolean null default false,
  liveness_confidence double precision null,
  verification_data jsonb null,
  live_face_embedding jsonb null,
  registration_status character varying(50) null default 'incomplete'::character varying,
  is_fully_verified boolean null default false,
  expiry_date timestamp without time zone null,
  last_activity_date timestamp without time zone null default now(),
  document_duplicate_check jsonb null,
  selfie_duplicate_check jsonb null,
  live_duplicate_check jsonb null,
  is_duplicate_user boolean null default false,
  duplicate_detection_count integer null default 0,
  constraint verifications_pkey primary key (id),
  constraint verifications_user_id_fkey foreign KEY (user_id) references users (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_verifications_user_id on public.verifications using btree (user_id) TABLESPACE pg_default;

create index IF not exists idx_verified_users on public.verifications using btree (is_fully_verified, expiry_date) TABLESPACE pg_default
where
  (is_fully_verified = true);
# Then create 4 buckets for storing:
# 1. Documents
# 2. Photo of the candidate
# 3. Biometric or signature
# 4. Live preview capture
# The files  stored in the buckets are done based on the uniques ID created for the users, folders formed with those unique ID's and the files are stored in them
create index IF not exists idx_users_email on public.users using btree (email) TABLESPACE pg_default;
